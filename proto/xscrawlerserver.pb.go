// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xscrawlerserver.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	xscrawlerserver.proto

It has these top-level messages:
	ArticleObj
	ArticleMediaObj
	UserObj
	ArticleAuthorObj
	ActData
	ResultData
	ResultArticlesList
	UserAct
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import "fmt"
import "math"

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// 文章数据
type ArticleObj struct {
	XsId                    int64            `protobuf:"zigzag64,1,opt,name=xsId" json:"xsId,omitempty"`
	SourceId                string           `protobuf:"bytes,2,opt,name=sourceId" json:"sourceId,omitempty"`
	Title                   string           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	ContentHtml             string           `protobuf:"bytes,4,opt,name=contentHtml" json:"contentHtml,omitempty"`
	ThumbnailsUrl           []string         `protobuf:"bytes,5,rep,name=thumbnailsUrl" json:"thumbnailsUrl,omitempty"`
	SourceWebUrl            string           `protobuf:"bytes,6,opt,name=sourceWebUrl" json:"sourceWebUrl,omitempty"`
	SourcePublishTimeStr    string           `protobuf:"bytes,7,opt,name=sourcePublishTimeStr" json:"sourcePublishTimeStr,omitempty"`
	SourcePublishTimeUTCSec int64            `protobuf:"zigzag64,8,opt,name=sourcePublishTimeUTCSec" json:"sourcePublishTimeUTCSec,omitempty"`
	SourceSiteName          string           `protobuf:"bytes,9,opt,name=sourceSiteName" json:"sourceSiteName,omitempty"`
	Media                   *ArticleMediaObj `protobuf:"bytes,10,opt,name=media" json:"media,omitempty"`
	SourceHtml              string           `protobuf:"bytes,11,opt,name=sourceHtml" json:"sourceHtml,omitempty"`
	SourceViewNum           int64            `protobuf:"zigzag64,30,opt,name=sourceViewNum" json:"sourceViewNum,omitempty"`
	SourceCommentNum        int64            `protobuf:"zigzag64,31,opt,name=sourceCommentNum" json:"sourceCommentNum,omitempty"`
	SourceLikeNum           int64            `protobuf:"zigzag64,32,opt,name=sourceLikeNum" json:"sourceLikeNum,omitempty"`
}

func (m *ArticleObj) Reset()                    { *m = ArticleObj{} }
func (m *ArticleObj) String() string            { return proto1.CompactTextString(m) }
func (*ArticleObj) ProtoMessage()               {}
func (*ArticleObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArticleObj) GetXsId() int64 {
	if m != nil {
		return m.XsId
	}
	return 0
}

func (m *ArticleObj) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *ArticleObj) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ArticleObj) GetContentHtml() string {
	if m != nil {
		return m.ContentHtml
	}
	return ""
}

func (m *ArticleObj) GetThumbnailsUrl() []string {
	if m != nil {
		return m.ThumbnailsUrl
	}
	return nil
}

func (m *ArticleObj) GetSourceWebUrl() string {
	if m != nil {
		return m.SourceWebUrl
	}
	return ""
}

func (m *ArticleObj) GetSourcePublishTimeStr() string {
	if m != nil {
		return m.SourcePublishTimeStr
	}
	return ""
}

func (m *ArticleObj) GetSourcePublishTimeUTCSec() int64 {
	if m != nil {
		return m.SourcePublishTimeUTCSec
	}
	return 0
}

func (m *ArticleObj) GetSourceSiteName() string {
	if m != nil {
		return m.SourceSiteName
	}
	return ""
}

func (m *ArticleObj) GetMedia() *ArticleMediaObj {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ArticleObj) GetSourceHtml() string {
	if m != nil {
		return m.SourceHtml
	}
	return ""
}

func (m *ArticleObj) GetSourceViewNum() int64 {
	if m != nil {
		return m.SourceViewNum
	}
	return 0
}

func (m *ArticleObj) GetSourceCommentNum() int64 {
	if m != nil {
		return m.SourceCommentNum
	}
	return 0
}

func (m *ArticleObj) GetSourceLikeNum() int64 {
	if m != nil {
		return m.SourceLikeNum
	}
	return 0
}

// 文章视频数据
type ArticleMediaObj struct {
	SourceId     string            `protobuf:"bytes,1,opt,name=sourceId" json:"sourceId,omitempty"`
	VideoSrc     string            `protobuf:"bytes,2,opt,name=videoSrc" json:"videoSrc,omitempty"`
	VideoHtmlUrl string            `protobuf:"bytes,3,opt,name=videoHtmlUrl" json:"videoHtmlUrl,omitempty"`
	Other        map[string]string `protobuf:"bytes,4,rep,name=other" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ArticleMediaObj) Reset()                    { *m = ArticleMediaObj{} }
func (m *ArticleMediaObj) String() string            { return proto1.CompactTextString(m) }
func (*ArticleMediaObj) ProtoMessage()               {}
func (*ArticleMediaObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArticleMediaObj) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *ArticleMediaObj) GetVideoSrc() string {
	if m != nil {
		return m.VideoSrc
	}
	return ""
}

func (m *ArticleMediaObj) GetVideoHtmlUrl() string {
	if m != nil {
		return m.VideoHtmlUrl
	}
	return ""
}

func (m *ArticleMediaObj) GetOther() map[string]string {
	if m != nil {
		return m.Other
	}
	return nil
}

// 作者用户数据
type UserObj struct {
	XsId           int64  `protobuf:"zigzag64,1,opt,name=xsId" json:"xsId,omitempty"`
	SourceId       string `protobuf:"bytes,2,opt,name=sourceId" json:"sourceId,omitempty"`
	AccountNum     string `protobuf:"bytes,3,opt,name=accountNum" json:"accountNum,omitempty"`
	Nickname       string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	IconUrl        string `protobuf:"bytes,5,opt,name=iconUrl" json:"iconUrl,omitempty"`
	SourceSitename string `protobuf:"bytes,6,opt,name=sourceSitename" json:"sourceSitename,omitempty"`
	HomeUrl        string `protobuf:"bytes,7,opt,name=homeUrl" json:"homeUrl,omitempty"`
	FunNum         int64  `protobuf:"zigzag64,20,opt,name=funNum" json:"funNum,omitempty"`
}

func (m *UserObj) Reset()                    { *m = UserObj{} }
func (m *UserObj) String() string            { return proto1.CompactTextString(m) }
func (*UserObj) ProtoMessage()               {}
func (*UserObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserObj) GetXsId() int64 {
	if m != nil {
		return m.XsId
	}
	return 0
}

func (m *UserObj) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *UserObj) GetAccountNum() string {
	if m != nil {
		return m.AccountNum
	}
	return ""
}

func (m *UserObj) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserObj) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *UserObj) GetSourceSitename() string {
	if m != nil {
		return m.SourceSitename
	}
	return ""
}

func (m *UserObj) GetHomeUrl() string {
	if m != nil {
		return m.HomeUrl
	}
	return ""
}

func (m *UserObj) GetFunNum() int64 {
	if m != nil {
		return m.FunNum
	}
	return 0
}

type ArticleAuthorObj struct {
	Article *ArticleObj `protobuf:"bytes,1,opt,name=article" json:"article,omitempty"`
	User    *UserObj    `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *ArticleAuthorObj) Reset()                    { *m = ArticleAuthorObj{} }
func (m *ArticleAuthorObj) String() string            { return proto1.CompactTextString(m) }
func (*ArticleAuthorObj) ProtoMessage()               {}
func (*ArticleAuthorObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ArticleAuthorObj) GetArticle() *ArticleObj {
	if m != nil {
		return m.Article
	}
	return nil
}

func (m *ArticleAuthorObj) GetUser() *UserObj {
	if m != nil {
		return m.User
	}
	return nil
}

// 请求数据基础数据
type ActData struct {
	RequestId string `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
}

func (m *ActData) Reset()                    { *m = ActData{} }
func (m *ActData) String() string            { return proto1.CompactTextString(m) }
func (*ActData) ProtoMessage()               {}
func (*ActData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ActData) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// 返回结果
type ResultData struct {
	Code      int32  `protobuf:"zigzag32,1,opt,name=code" json:"code,omitempty"`
	Errmsg    string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=requestId" json:"requestId,omitempty"`
}

func (m *ResultData) Reset()                    { *m = ResultData{} }
func (m *ResultData) String() string            { return proto1.CompactTextString(m) }
func (*ResultData) ProtoMessage()               {}
func (*ResultData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResultData) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResultData) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *ResultData) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// 文章列表
type ResultArticlesList struct {
	Code     int32         `protobuf:"zigzag32,1,opt,name=code" json:"code,omitempty"`
	Errmsg   string        `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	Author   *UserObj      `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Articles []*ArticleObj `protobuf:"bytes,4,rep,name=articles" json:"articles,omitempty"`
}

func (m *ResultArticlesList) Reset()                    { *m = ResultArticlesList{} }
func (m *ResultArticlesList) String() string            { return proto1.CompactTextString(m) }
func (*ResultArticlesList) ProtoMessage()               {}
func (*ResultArticlesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResultArticlesList) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResultArticlesList) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *ResultArticlesList) GetAuthor() *UserObj {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ResultArticlesList) GetArticles() []*ArticleObj {
	if m != nil {
		return m.Articles
	}
	return nil
}

type UserAct struct {
	RequestId string   `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	User      *UserObj `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *UserAct) Reset()                    { *m = UserAct{} }
func (m *UserAct) String() string            { return proto1.CompactTextString(m) }
func (*UserAct) ProtoMessage()               {}
func (*UserAct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserAct) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *UserAct) GetUser() *UserObj {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto1.RegisterType((*ArticleObj)(nil), "proto.ArticleObj")
	proto1.RegisterType((*ArticleMediaObj)(nil), "proto.ArticleMediaObj")
	proto1.RegisterType((*UserObj)(nil), "proto.UserObj")
	proto1.RegisterType((*ArticleAuthorObj)(nil), "proto.ArticleAuthorObj")
	proto1.RegisterType((*ActData)(nil), "proto.ActData")
	proto1.RegisterType((*ResultData)(nil), "proto.ResultData")
	proto1.RegisterType((*ResultArticlesList)(nil), "proto.ResultArticlesList")
	proto1.RegisterType((*UserAct)(nil), "proto.UserAct")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RockCrawler service

type RockCrawlerClient interface {
	// 根据作者所属网站名，采集系统内id,用户在原平台id，查询作者文章
	LoadArticlesByUser(ctx context.Context, in *UserAct, opts ...grpc.CallOption) (*ResultArticlesList, error)
}

type rockCrawlerClient struct {
	cc *grpc.ClientConn
}

func NewRockCrawlerClient(cc *grpc.ClientConn) RockCrawlerClient {
	return &rockCrawlerClient{cc}
}

func (c *rockCrawlerClient) LoadArticlesByUser(ctx context.Context, in *UserAct, opts ...grpc.CallOption) (*ResultArticlesList, error) {
	out := new(ResultArticlesList)
	err := grpc.Invoke(ctx, "/proto.RockCrawler/LoadArticlesByUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RockCrawler service

type RockCrawlerServer interface {
	// 根据作者所属网站名，采集系统内id,用户在原平台id，查询作者文章
	LoadArticlesByUser(context.Context, *UserAct) (*ResultArticlesList, error)
}

func RegisterRockCrawlerServer(s *grpc.Server, srv RockCrawlerServer) {
	s.RegisterService(&_RockCrawler_serviceDesc, srv)
}

func _RockCrawler_LoadArticlesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockCrawlerServer).LoadArticlesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RockCrawler/LoadArticlesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockCrawlerServer).LoadArticlesByUser(ctx, req.(*UserAct))
	}
	return interceptor(ctx, in, info, handler)
}

var _RockCrawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RockCrawler",
	HandlerType: (*RockCrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadArticlesByUser",
			Handler:    _RockCrawler_LoadArticlesByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xscrawlerserver.proto",
}

func init() { proto1.RegisterFile("xscrawlerserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x6f, 0xd3, 0x4a,
	0x10, 0x95, 0x9b, 0xef, 0xc9, 0xbd, 0xbd, 0xed, 0xa8, 0xb7, 0xd7, 0x37, 0x42, 0x25, 0x58, 0xa8,
	0x44, 0x7c, 0xf4, 0x21, 0x3c, 0x50, 0xf1, 0x82, 0x42, 0x41, 0xa2, 0xa2, 0xb4, 0xc8, 0x69, 0xcb,
	0xb3, 0xb3, 0x19, 0x88, 0x1b, 0xdb, 0x0b, 0xbb, 0xeb, 0x7e, 0xfc, 0x12, 0x24, 0x7e, 0x1d, 0xaf,
	0xfc, 0x0b, 0xb4, 0x1f, 0x4e, 0xe3, 0xa4, 0x20, 0xe0, 0xa9, 0x7b, 0xce, 0x9c, 0x9d, 0x9d, 0x39,
	0x3e, 0x0d, 0xfc, 0x7b, 0x29, 0x99, 0x88, 0x2e, 0x12, 0x12, 0x92, 0xc4, 0x39, 0x89, 0x9d, 0x8f,
	0x82, 0x2b, 0x8e, 0x35, 0xf3, 0x27, 0xf8, 0x52, 0x05, 0x18, 0x08, 0x15, 0xb3, 0x84, 0x8e, 0x46,
	0x67, 0x88, 0x50, 0xbd, 0x94, 0xfb, 0x63, 0xdf, 0xeb, 0x7a, 0x3d, 0x0c, 0xcd, 0x19, 0x3b, 0xd0,
	0x94, 0x3c, 0x17, 0x8c, 0xf6, 0xc7, 0xfe, 0x4a, 0xd7, 0xeb, 0xb5, 0xc2, 0x19, 0xc6, 0x0d, 0xa8,
	0xa9, 0x58, 0x25, 0xe4, 0x57, 0x4c, 0xc1, 0x02, 0xec, 0x42, 0x9b, 0xf1, 0x4c, 0x51, 0xa6, 0x5e,
	0xa9, 0x34, 0xf1, 0xab, 0xa6, 0x36, 0x4f, 0xe1, 0x5d, 0xf8, 0x5b, 0x4d, 0xf2, 0x74, 0x94, 0x45,
	0x71, 0x22, 0x4f, 0x44, 0xe2, 0xd7, 0xba, 0x95, 0x5e, 0x2b, 0x2c, 0x93, 0x18, 0xc0, 0x5f, 0xf6,
	0xa5, 0x77, 0x34, 0xd2, 0xa2, 0xba, 0x69, 0x54, 0xe2, 0xb0, 0x0f, 0x1b, 0x16, 0xbf, 0xcd, 0x47,
	0x49, 0x2c, 0x27, 0xc7, 0x71, 0x4a, 0x43, 0x25, 0xfc, 0x86, 0xd1, 0xde, 0x58, 0xc3, 0x5d, 0xf8,
	0x6f, 0x89, 0x3f, 0x39, 0xde, 0x1b, 0x12, 0xf3, 0x9b, 0x66, 0xf1, 0x1f, 0x95, 0x71, 0x1b, 0x56,
	0x6d, 0x69, 0x18, 0x2b, 0x3a, 0x8c, 0x52, 0xf2, 0x5b, 0xe6, 0x9d, 0x05, 0x16, 0x1f, 0x42, 0x2d,
	0xa5, 0x71, 0x1c, 0xf9, 0xd0, 0xf5, 0x7a, 0xed, 0xfe, 0xa6, 0x35, 0x7d, 0xc7, 0x39, 0xfd, 0x46,
	0x97, 0x8e, 0x46, 0x67, 0xa1, 0x15, 0xe1, 0x16, 0x80, 0xbd, 0x6f, 0xec, 0x6a, 0x9b, 0x8e, 0x73,
	0x8c, 0x76, 0xcb, 0xa2, 0xd3, 0x98, 0x2e, 0x0e, 0xf3, 0xd4, 0xdf, 0x32, 0x53, 0x96, 0x49, 0xbc,
	0x0f, 0x6b, 0x96, 0xd8, 0xe3, 0x69, 0x4a, 0x99, 0xd2, 0xc2, 0xdb, 0x46, 0xb8, 0xc4, 0x5f, 0x77,
	0x3c, 0x88, 0xa7, 0xa4, 0x85, 0xdd, 0xf9, 0x8e, 0x8e, 0x0c, 0xbe, 0x7a, 0xf0, 0xcf, 0xc2, 0xc8,
	0xa5, 0x34, 0x78, 0x0b, 0x69, 0xe8, 0x40, 0xf3, 0x3c, 0x1e, 0x13, 0x1f, 0x0a, 0x56, 0x24, 0xa5,
	0xc0, 0xfa, 0x5b, 0x9a, 0xb3, 0x5e, 0x48, 0x7f, 0x4b, 0x1b, 0x98, 0x12, 0x87, 0x4f, 0xa0, 0xc6,
	0xd5, 0x84, 0x84, 0x5f, 0xed, 0x56, 0x7a, 0xed, 0xfe, 0x9d, 0x9b, 0x5d, 0xdb, 0x39, 0xd2, 0x9a,
	0x97, 0x99, 0x12, 0x57, 0xa1, 0xd5, 0x77, 0x76, 0x01, 0xae, 0x49, 0x5c, 0x83, 0xca, 0x94, 0xae,
	0xdc, 0x74, 0xfa, 0xa8, 0x63, 0x7a, 0x1e, 0x25, 0x39, 0xb9, 0xa9, 0x2c, 0x78, 0xba, 0xb2, 0xeb,
	0x05, 0xdf, 0x3c, 0x68, 0x9c, 0x48, 0x12, 0x7f, 0x12, 0xfe, 0x2d, 0x80, 0x88, 0x31, 0x9e, 0x5b,
	0xab, 0xed, 0x42, 0x73, 0x8c, 0xbe, 0x9b, 0xc5, 0x6c, 0x9a, 0xe9, 0x98, 0xd8, 0xff, 0x81, 0x19,
	0x46, 0x1f, 0x1a, 0x31, 0xe3, 0x99, 0x8d, 0xbe, 0x2e, 0x15, 0xb0, 0x1c, 0x31, 0x73, 0xb7, 0xbe,
	0x18, 0xb1, 0xa2, 0xc3, 0x84, 0xa7, 0xa4, 0x3b, 0xd8, 0xac, 0x17, 0x10, 0x37, 0xa1, 0xfe, 0x3e,
	0xcf, 0xf4, 0x4c, 0x1b, 0x66, 0x13, 0x87, 0x02, 0x06, 0x6b, 0xce, 0xca, 0x41, 0xae, 0x26, 0xdc,
	0xec, 0xfc, 0x00, 0x1a, 0x91, 0xe5, 0xcc, 0xda, 0xed, 0xfe, 0x7a, 0xd9, 0x74, 0x9d, 0xd2, 0x42,
	0x81, 0x01, 0x54, 0x73, 0x49, 0xc2, 0x18, 0xd1, 0xee, 0xaf, 0x3a, 0xa5, 0xb3, 0x2f, 0x34, 0xb5,
	0xe0, 0x1e, 0x34, 0x06, 0x4c, 0xbd, 0x88, 0x54, 0x84, 0xb7, 0xa0, 0x25, 0xe8, 0x53, 0x4e, 0x52,
	0xcd, 0xb2, 0x72, 0x4d, 0x04, 0xa7, 0x00, 0x21, 0xc9, 0x3c, 0xb1, 0x5a, 0x84, 0x2a, 0xe3, 0x63,
	0x3b, 0xc4, 0x7a, 0x68, 0xce, 0x7a, 0x0f, 0x12, 0x22, 0x95, 0x1f, 0x9c, 0xf3, 0x0e, 0x95, 0xfb,
	0x56, 0x16, 0xfb, 0x7e, 0xf6, 0x00, 0x6d, 0x63, 0xb7, 0x82, 0x3c, 0x88, 0xa5, 0xfa, 0xad, 0x07,
	0xb6, 0xa1, 0x1e, 0x19, 0x87, 0x4c, 0xf7, 0xe5, 0x4d, 0x5d, 0x15, 0x1f, 0x41, 0xd3, 0x59, 0x23,
	0x5d, 0x64, 0x6f, 0x70, 0x6f, 0x26, 0x09, 0x5e, 0xdb, 0xa8, 0x0d, 0x98, 0xfa, 0xb9, 0x35, 0xbf,
	0xe2, 0x73, 0xff, 0x10, 0xda, 0x21, 0x67, 0xd3, 0x3d, 0xfb, 0xd3, 0x8e, 0xcf, 0x00, 0x0f, 0x78,
	0x34, 0x2e, 0x56, 0x7e, 0x7e, 0xa5, 0xd5, 0x38, 0x7f, 0x75, 0xc0, 0x54, 0xe7, 0x7f, 0x87, 0x97,
	0xfd, 0x19, 0xd5, 0x4d, 0xe5, 0xf1, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0xb7, 0x3b, 0xba,
	0x2f, 0x06, 0x00, 0x00,
}
